name: Generate Contributor Welcome Message (scheduled)

# Replace automatic trigger with a manual one as we need to improve this!
on: workflow_dispatch

#on:
  #schedule:
  #  - cron: "*/5 * * * *"
  #workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: welcome-pr-scanner
  cancel-in-progress: false

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Scan recent PRs and post welcome (marker-only, verbose)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const MARKER = "<!-- rsyslog-welcome-bot:v1 -->";
            const windowMs = 24*60*60*1000;
            const now = Date.now();
            const since = new Date(now - windowMs);

            // ISO without milliseconds for Search API
            const sinceISOsec = new Date(Math.floor(since.getTime()/1000)*1000)
              .toISOString().replace(/\.\d{3}Z$/, "Z");

            function ordinal(n) {
              const s = ["th","st","nd","rd"], v = n % 100;
              return n + (s[(v-20)%10] || s[v] || s[0]);
            }

            core.info(`Repo: ${owner}/${repo} | Window: created >= ${sinceISOsec}`);

            // Primary: Search API
            const q = `repo:${owner}/${repo} is:pr is:open created:>=${sinceISOsec}`;
            let items = await github.paginate(
              github.rest.search.issuesAndPullRequests,
              { q, sort: "created", order: "desc", per_page: 100 },
              (res) => res?.data?.items ?? []
            );

            const numsSearch = items.map(it => it?.number).filter(n => typeof n === "number");
            core.info(`Search API returned ${numsSearch.length} PR(s): ${numsSearch.join(", ") || "(none)"}`);

            // Fallback: pulls.list + local filter
            if (items.length === 0) {
              core.info("Fallback to pulls.list + local 24h filter");
              const pulls = await github.paginate(
                github.rest.pulls.list,
                { owner, repo, state: "open", sort: "created", direction: "desc", per_page: 100 }
              );
              items = pulls.filter(pr => new Date(pr.created_at).getTime() >= since.getTime());
              const numsList = items.map(pr => pr?.number).filter(n => typeof n === "number");
              core.info(`pulls.list produced ${numsList.length} PR(s): ${numsList.join(", ") || "(none)"}`);
            }

            let considered = 0, posted = 0, skipped = 0;

            for (const it of items) {
              if (!it || typeof it.number !== "number" || !it.user) {
                core.info(`Skip malformed item: ${JSON.stringify({n: it?.number, u: it?.user?.login})}`);
                skipped++; continue;
              }

              const number = it.number;
              const pr_creator = it.user.login;
              considered++;
              core.info(`#${number}: considering (author=${pr_creator})`);

              // Skip bots
              if (it.user?.type === "Bot") {
                core.info(`#${number}: skip bot`);
                skipped++; continue;
              }

              // Marker already present?
              const comments = await github.paginate(
                github.rest.issues.listComments,
                { owner, repo, issue_number: number, per_page: 100 }
              );
              if (comments.some(c => c.body?.includes(MARKER))) {
                core.info(`#${number}: marker present -> skip`);
                skipped++; continue;
              }

              // Account age (days)
              let account_age_days = 0;
              try {
                const u = await github.rest.users.getByUsername({ username: pr_creator });
                const createdAt = new Date(u.data.created_at).getTime();
                account_age_days = Math.max(0, Math.floor((now - createdAt) / 86400000));
              } catch { /* ignore */ }

              // Merged PRs in THIS repo
              let merged_prs = 0;
              try {
                const qMerged = `repo:${owner}/${repo} is:pr is:merged author:${pr_creator}`;
                const res = await github.rest.search.issuesAndPullRequests({ q: qMerged, per_page: 1 });
                merged_prs = res.data.total_count || 0;
              } catch { /* ignore */ }

              // Total public commits
              let total_public_commits = 0;
              try {
                const res = await github.request('GET /search/commits', {
                  q: `author:${pr_creator}`,
                  per_page: 1,
                  headers: { accept: 'application/vnd.github.v3.text-match+json' }
                });
                total_public_commits = res.data.total_count || 0;
              } catch { /* ignore */ }

              core.info(`#${number}: age=${account_age_days}d merged_here=${merged_prs} commits=${total_public_commits}`);

              // Skip seasoned contributors
              if (merged_prs >= 30) {
                core.info(`#${number}: seasoned contributor -> skip`);
                skipped++; continue;
              }

              // Your original wording
              let welcomeIntro = `ðŸ‘‹ **Welcome, @${pr_creator}!**`;
              if (account_age_days < 30) {
                welcomeIntro += ` We especially appreciate developers like you who are new to the platform choosing to contribute to our project!`;
              } else if (account_age_days < 365) {
                welcomeIntro += ` We are thrilled to see a growing developer on GitHub contributing to us!`;
              } else {
                welcomeIntro += ` We're thrilled to see your contribution!`;
              }

              let mainMessage = '';
              if (merged_prs === 0 && total_public_commits === 0) {
                mainMessage = `Thank you for your very first PR on GitHub! We are happy you have chosen rsyslog to begin your open source journey.`;
              } else if (merged_prs === 0) {
                mainMessage = `Thank you for your very first PR with us!`;
              } else if (merged_prs < 10) {
                mainMessage = `This is your ${ordinal(merged_prs + 1)} PR with us! We're so glad you're sticking with us.`;
              } else {
                mainMessage = `Thank you for your continued contributions!`;
              }

              let policyMessage = '';
              if (merged_prs < 30) {
                policyMessage = `\nAll contributions undergo automated and manual review. To help us merge your PR faster, please read the comments from automated tools and either implement the suggested fixes or add a short note on why they're not taken.`;
              }

              let generalMessage = '';
              if (!(merged_prs === 0 && total_public_commits === 0)) {
                if (total_public_commits < 10) {
                  generalMessage = `\n\nIt looks like you have ${total_public_commits} public commits on your GitHub career so far - we are happy you have chosen rsyslog.`;
                } else if (total_public_commits < 30) {
                  generalMessage = `\n\nThanks for considering rsyslog to add to your ${total_public_commits} public commits.`;
                } else if (total_public_commits < 100) {
                  generalMessage = `\n\nContributing to rsyslog is a great idea to grow your profile on GitHub!`;
                }
              }

              const finalMessage = `${MARKER}\n${welcomeIntro}\n\n${mainMessage}${policyMessage}${generalMessage}`;

              await github.rest.issues.createComment({
                owner, repo, issue_number: number, body: finalMessage
              });

              posted++;
              core.info(`#${number}: welcome posted`);
            }

            core.info(`Summary: considered=${considered}, posted=${posted}, skipped=${skipped}`);
            core.info("Done.");

